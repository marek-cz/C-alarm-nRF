
Program_nRF.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  000002ec  00000360  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002ec  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000376  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003a8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  000003e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a0d  00000000  00000000  00000440  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000077a  00000000  00000000  00000e4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003d0  00000000  00000000  000015c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c8  00000000  00000000  00001998  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000403  00000000  00000000  00001a60  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000027c  00000000  00000000  00001e63  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  000020df  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec ee       	ldi	r30, 0xEC	; 236
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 31       	cpi	r26, 0x16	; 22
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <main>
  8e:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <togglePin>:

#include <avr/io.h>
#include "GPIO.h"

void togglePin( gpioPin_t pin )
{
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
  9e:	27 97       	sbiw	r28, 0x07	; 7
  a0:	0f b6       	in	r0, 0x3f	; 63
  a2:	f8 94       	cli
  a4:	de bf       	out	0x3e, r29	; 62
  a6:	0f be       	out	0x3f, r0	; 63
  a8:	cd bf       	out	0x3d, r28	; 61
  aa:	29 83       	std	Y+1, r18	; 0x01
  ac:	3a 83       	std	Y+2, r19	; 0x02
  ae:	4b 83       	std	Y+3, r20	; 0x03
  b0:	5c 83       	std	Y+4, r21	; 0x04
  b2:	6d 83       	std	Y+5, r22	; 0x05
  b4:	7e 83       	std	Y+6, r23	; 0x06
  b6:	8f 83       	std	Y+7, r24	; 0x07
  b8:	e9 81       	ldd	r30, Y+1	; 0x01
  ba:	fa 81       	ldd	r31, Y+2	; 0x02
	//*(pin->PORTx) ^= ( 1 << pin->pinNumber );
	*(pin.PORTx) ^= (1 << pin.pinNumber );
  bc:	20 81       	ld	r18, Z
  be:	81 e0       	ldi	r24, 0x01	; 1
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	0f 80       	ldd	r0, Y+7	; 0x07
  c4:	02 c0       	rjmp	.+4      	; 0xca <togglePin+0x34>
  c6:	88 0f       	add	r24, r24
  c8:	99 1f       	adc	r25, r25
  ca:	0a 94       	dec	r0
  cc:	e2 f7       	brpl	.-8      	; 0xc6 <togglePin+0x30>
  ce:	82 27       	eor	r24, r18
  d0:	80 83       	st	Z, r24
}
  d2:	27 96       	adiw	r28, 0x07	; 7
  d4:	0f b6       	in	r0, 0x3f	; 63
  d6:	f8 94       	cli
  d8:	de bf       	out	0x3e, r29	; 62
  da:	0f be       	out	0x3f, r0	; 63
  dc:	cd bf       	out	0x3d, r28	; 61
  de:	df 91       	pop	r29
  e0:	cf 91       	pop	r28
  e2:	08 95       	ret

000000e4 <setPin>:

void setPin( gpioPin_t pin )
{
  e4:	cf 93       	push	r28
  e6:	df 93       	push	r29
  e8:	cd b7       	in	r28, 0x3d	; 61
  ea:	de b7       	in	r29, 0x3e	; 62
  ec:	27 97       	sbiw	r28, 0x07	; 7
  ee:	0f b6       	in	r0, 0x3f	; 63
  f0:	f8 94       	cli
  f2:	de bf       	out	0x3e, r29	; 62
  f4:	0f be       	out	0x3f, r0	; 63
  f6:	cd bf       	out	0x3d, r28	; 61
  f8:	29 83       	std	Y+1, r18	; 0x01
  fa:	3a 83       	std	Y+2, r19	; 0x02
  fc:	4b 83       	std	Y+3, r20	; 0x03
  fe:	5c 83       	std	Y+4, r21	; 0x04
 100:	6d 83       	std	Y+5, r22	; 0x05
 102:	7e 83       	std	Y+6, r23	; 0x06
 104:	8f 83       	std	Y+7, r24	; 0x07
 106:	e9 81       	ldd	r30, Y+1	; 0x01
 108:	fa 81       	ldd	r31, Y+2	; 0x02
	*(pin.PORTx) |= (1 << pin.pinNumber );
 10a:	20 81       	ld	r18, Z
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	0f 80       	ldd	r0, Y+7	; 0x07
 112:	02 c0       	rjmp	.+4      	; 0x118 <setPin+0x34>
 114:	88 0f       	add	r24, r24
 116:	99 1f       	adc	r25, r25
 118:	0a 94       	dec	r0
 11a:	e2 f7       	brpl	.-8      	; 0x114 <setPin+0x30>
 11c:	82 2b       	or	r24, r18
 11e:	80 83       	st	Z, r24
}
 120:	27 96       	adiw	r28, 0x07	; 7
 122:	0f b6       	in	r0, 0x3f	; 63
 124:	f8 94       	cli
 126:	de bf       	out	0x3e, r29	; 62
 128:	0f be       	out	0x3f, r0	; 63
 12a:	cd bf       	out	0x3d, r28	; 61
 12c:	df 91       	pop	r29
 12e:	cf 91       	pop	r28
 130:	08 95       	ret

00000132 <clearPin>:

void clearPin(gpioPin_t pin)
{
 132:	cf 93       	push	r28
 134:	df 93       	push	r29
 136:	cd b7       	in	r28, 0x3d	; 61
 138:	de b7       	in	r29, 0x3e	; 62
 13a:	27 97       	sbiw	r28, 0x07	; 7
 13c:	0f b6       	in	r0, 0x3f	; 63
 13e:	f8 94       	cli
 140:	de bf       	out	0x3e, r29	; 62
 142:	0f be       	out	0x3f, r0	; 63
 144:	cd bf       	out	0x3d, r28	; 61
 146:	29 83       	std	Y+1, r18	; 0x01
 148:	3a 83       	std	Y+2, r19	; 0x02
 14a:	4b 83       	std	Y+3, r20	; 0x03
 14c:	5c 83       	std	Y+4, r21	; 0x04
 14e:	6d 83       	std	Y+5, r22	; 0x05
 150:	7e 83       	std	Y+6, r23	; 0x06
 152:	8f 83       	std	Y+7, r24	; 0x07
 154:	e9 81       	ldd	r30, Y+1	; 0x01
 156:	fa 81       	ldd	r31, Y+2	; 0x02
	*(pin.PORTx) &= ~(1 << pin.pinNumber );
 158:	20 81       	ld	r18, Z
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	0f 80       	ldd	r0, Y+7	; 0x07
 160:	02 c0       	rjmp	.+4      	; 0x166 <clearPin+0x34>
 162:	88 0f       	add	r24, r24
 164:	99 1f       	adc	r25, r25
 166:	0a 94       	dec	r0
 168:	e2 f7       	brpl	.-8      	; 0x162 <clearPin+0x30>
 16a:	80 95       	com	r24
 16c:	82 23       	and	r24, r18
 16e:	80 83       	st	Z, r24
}
 170:	27 96       	adiw	r28, 0x07	; 7
 172:	0f b6       	in	r0, 0x3f	; 63
 174:	f8 94       	cli
 176:	de bf       	out	0x3e, r29	; 62
 178:	0f be       	out	0x3f, r0	; 63
 17a:	cd bf       	out	0x3d, r28	; 61
 17c:	df 91       	pop	r29
 17e:	cf 91       	pop	r28
 180:	08 95       	ret

00000182 <setPinOutput>:

void setPinOutput( gpioPin_t pin )
{
 182:	cf 93       	push	r28
 184:	df 93       	push	r29
 186:	cd b7       	in	r28, 0x3d	; 61
 188:	de b7       	in	r29, 0x3e	; 62
 18a:	27 97       	sbiw	r28, 0x07	; 7
 18c:	0f b6       	in	r0, 0x3f	; 63
 18e:	f8 94       	cli
 190:	de bf       	out	0x3e, r29	; 62
 192:	0f be       	out	0x3f, r0	; 63
 194:	cd bf       	out	0x3d, r28	; 61
 196:	29 83       	std	Y+1, r18	; 0x01
 198:	3a 83       	std	Y+2, r19	; 0x02
 19a:	4b 83       	std	Y+3, r20	; 0x03
 19c:	5c 83       	std	Y+4, r21	; 0x04
 19e:	6d 83       	std	Y+5, r22	; 0x05
 1a0:	7e 83       	std	Y+6, r23	; 0x06
 1a2:	8f 83       	std	Y+7, r24	; 0x07
 1a4:	eb 81       	ldd	r30, Y+3	; 0x03
 1a6:	fc 81       	ldd	r31, Y+4	; 0x04
	*(pin.DDRx) |= ( 1 << pin.pinNumber );
 1a8:	20 81       	ld	r18, Z
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	0f 80       	ldd	r0, Y+7	; 0x07
 1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <setPinOutput+0x34>
 1b2:	88 0f       	add	r24, r24
 1b4:	99 1f       	adc	r25, r25
 1b6:	0a 94       	dec	r0
 1b8:	e2 f7       	brpl	.-8      	; 0x1b2 <setPinOutput+0x30>
 1ba:	82 2b       	or	r24, r18
 1bc:	80 83       	st	Z, r24
 1be:	27 96       	adiw	r28, 0x07	; 7
 1c0:	0f b6       	in	r0, 0x3f	; 63
 1c2:	f8 94       	cli
 1c4:	de bf       	out	0x3e, r29	; 62
 1c6:	0f be       	out	0x3f, r0	; 63
 1c8:	cd bf       	out	0x3d, r28	; 61
 1ca:	df 91       	pop	r29
 1cc:	cf 91       	pop	r28
 1ce:	08 95       	ret

000001d0 <main>:

#include "GPIO/GPIO.h"


int main(void)
{
 1d0:	cf 93       	push	r28
 1d2:	df 93       	push	r29
 1d4:	cd b7       	in	r28, 0x3d	; 61
 1d6:	de b7       	in	r29, 0x3e	; 62
 1d8:	65 97       	sbiw	r28, 0x15	; 21
 1da:	0f b6       	in	r0, 0x3f	; 63
 1dc:	f8 94       	cli
 1de:	de bf       	out	0x3e, r29	; 62
 1e0:	0f be       	out	0x3f, r0	; 63
 1e2:	cd bf       	out	0x3d, r28	; 61
	
	gpioPin_t led2 = { .PORTx = &PORTD, .DDRx = &DDRD, .PINx = &PIND, .pinNumber = PD7 };
 1e4:	87 e0       	ldi	r24, 0x07	; 7
 1e6:	e0 e0       	ldi	r30, 0x00	; 0
 1e8:	f1 e0       	ldi	r31, 0x01	; 1
 1ea:	de 01       	movw	r26, r28
 1ec:	11 96       	adiw	r26, 0x01	; 1
 1ee:	01 90       	ld	r0, Z+
 1f0:	0d 92       	st	X+, r0
 1f2:	8a 95       	dec	r24
 1f4:	e1 f7       	brne	.-8      	; 0x1ee <main+0x1e>
	gpioPin_t buzzer = { .PORTx = &PORTD, .DDRx = &DDRD, .PINx = &PIND, .pinNumber = PD4 };
 1f6:	87 e0       	ldi	r24, 0x07	; 7
 1f8:	e7 e0       	ldi	r30, 0x07	; 7
 1fa:	f1 e0       	ldi	r31, 0x01	; 1
 1fc:	de 01       	movw	r26, r28
 1fe:	18 96       	adiw	r26, 0x08	; 8
 200:	01 90       	ld	r0, Z+
 202:	0d 92       	st	X+, r0
 204:	8a 95       	dec	r24
 206:	e1 f7       	brne	.-8      	; 0x200 <main+0x30>
	gpioPin_t alarmLed = { .PORTx = &PORTD, .DDRx = &DDRD, .PINx = &PIND, .pinNumber = PD5 };
 208:	87 e0       	ldi	r24, 0x07	; 7
 20a:	ee e0       	ldi	r30, 0x0E	; 14
 20c:	f1 e0       	ldi	r31, 0x01	; 1
 20e:	de 01       	movw	r26, r28
 210:	1f 96       	adiw	r26, 0x0f	; 15
 212:	01 90       	ld	r0, Z+
 214:	0d 92       	st	X+, r0
 216:	8a 95       	dec	r24
 218:	e1 f7       	brne	.-8      	; 0x212 <main+0x42>
	
	// Konfiguracja pinow jako wyjscia:
	setPinOutput(led2);
 21a:	29 81       	ldd	r18, Y+1	; 0x01
 21c:	3a 81       	ldd	r19, Y+2	; 0x02
 21e:	4b 81       	ldd	r20, Y+3	; 0x03
 220:	5c 81       	ldd	r21, Y+4	; 0x04
 222:	6d 81       	ldd	r22, Y+5	; 0x05
 224:	7e 81       	ldd	r23, Y+6	; 0x06
 226:	8f 81       	ldd	r24, Y+7	; 0x07
 228:	0e 94 c1 00 	call	0x182	; 0x182 <setPinOutput>
	setPinOutput(buzzer);
 22c:	28 85       	ldd	r18, Y+8	; 0x08
 22e:	39 85       	ldd	r19, Y+9	; 0x09
 230:	4a 85       	ldd	r20, Y+10	; 0x0a
 232:	5b 85       	ldd	r21, Y+11	; 0x0b
 234:	6c 85       	ldd	r22, Y+12	; 0x0c
 236:	7d 85       	ldd	r23, Y+13	; 0x0d
 238:	8e 85       	ldd	r24, Y+14	; 0x0e
 23a:	0e 94 c1 00 	call	0x182	; 0x182 <setPinOutput>
	setPinOutput(alarmLed);
 23e:	2f 85       	ldd	r18, Y+15	; 0x0f
 240:	38 89       	ldd	r19, Y+16	; 0x10
 242:	49 89       	ldd	r20, Y+17	; 0x11
 244:	5a 89       	ldd	r21, Y+18	; 0x12
 246:	6b 89       	ldd	r22, Y+19	; 0x13
 248:	7c 89       	ldd	r23, Y+20	; 0x14
 24a:	8d 89       	ldd	r24, Y+21	; 0x15
 24c:	0e 94 c1 00 	call	0x182	; 0x182 <setPinOutput>
	
	// stan poczatkowy
	setPin(led2);
 250:	29 81       	ldd	r18, Y+1	; 0x01
 252:	3a 81       	ldd	r19, Y+2	; 0x02
 254:	4b 81       	ldd	r20, Y+3	; 0x03
 256:	5c 81       	ldd	r21, Y+4	; 0x04
 258:	6d 81       	ldd	r22, Y+5	; 0x05
 25a:	7e 81       	ldd	r23, Y+6	; 0x06
 25c:	8f 81       	ldd	r24, Y+7	; 0x07
 25e:	0e 94 72 00 	call	0xe4	; 0xe4 <setPin>
	
	setPin(buzzer);
 262:	28 85       	ldd	r18, Y+8	; 0x08
 264:	39 85       	ldd	r19, Y+9	; 0x09
 266:	4a 85       	ldd	r20, Y+10	; 0x0a
 268:	5b 85       	ldd	r21, Y+11	; 0x0b
 26a:	6c 85       	ldd	r22, Y+12	; 0x0c
 26c:	7d 85       	ldd	r23, Y+13	; 0x0d
 26e:	8e 85       	ldd	r24, Y+14	; 0x0e
 270:	0e 94 72 00 	call	0xe4	; 0xe4 <setPin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 274:	2f e3       	ldi	r18, 0x3F	; 63
 276:	8d e0       	ldi	r24, 0x0D	; 13
 278:	93 e0       	ldi	r25, 0x03	; 3
 27a:	21 50       	subi	r18, 0x01	; 1
 27c:	80 40       	sbci	r24, 0x00	; 0
 27e:	90 40       	sbci	r25, 0x00	; 0
 280:	e1 f7       	brne	.-8      	; 0x27a <main+0xaa>
 282:	00 c0       	rjmp	.+0      	; 0x284 <main+0xb4>
 284:	00 00       	nop
	_delay_ms(1000);
	clearPin(buzzer);
 286:	28 85       	ldd	r18, Y+8	; 0x08
 288:	39 85       	ldd	r19, Y+9	; 0x09
 28a:	4a 85       	ldd	r20, Y+10	; 0x0a
 28c:	5b 85       	ldd	r21, Y+11	; 0x0b
 28e:	6c 85       	ldd	r22, Y+12	; 0x0c
 290:	7d 85       	ldd	r23, Y+13	; 0x0d
 292:	8e 85       	ldd	r24, Y+14	; 0x0e
 294:	0e 94 99 00 	call	0x132	; 0x132 <clearPin>
 298:	14 e1       	ldi	r17, 0x14	; 20
	
	for(uint8_t i = 0; i < 20; i++)
	{
		togglePin(alarmLed);
 29a:	2f 85       	ldd	r18, Y+15	; 0x0f
 29c:	38 89       	ldd	r19, Y+16	; 0x10
 29e:	49 89       	ldd	r20, Y+17	; 0x11
 2a0:	5a 89       	ldd	r21, Y+18	; 0x12
 2a2:	6b 89       	ldd	r22, Y+19	; 0x13
 2a4:	7c 89       	ldd	r23, Y+20	; 0x14
 2a6:	8d 89       	ldd	r24, Y+21	; 0x15
 2a8:	0e 94 4b 00 	call	0x96	; 0x96 <togglePin>
 2ac:	2f e5       	ldi	r18, 0x5F	; 95
 2ae:	8a ee       	ldi	r24, 0xEA	; 234
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	21 50       	subi	r18, 0x01	; 1
 2b4:	80 40       	sbci	r24, 0x00	; 0
 2b6:	90 40       	sbci	r25, 0x00	; 0
 2b8:	e1 f7       	brne	.-8      	; 0x2b2 <main+0xe2>
 2ba:	00 c0       	rjmp	.+0      	; 0x2bc <main+0xec>
 2bc:	00 00       	nop
 2be:	11 50       	subi	r17, 0x01	; 1
	
	setPin(buzzer);
	_delay_ms(1000);
	clearPin(buzzer);
	
	for(uint8_t i = 0; i < 20; i++)
 2c0:	61 f7       	brne	.-40     	; 0x29a <main+0xca>
 2c2:	2f e9       	ldi	r18, 0x9F	; 159
 2c4:	86 e8       	ldi	r24, 0x86	; 134
 2c6:	91 e0       	ldi	r25, 0x01	; 1
 2c8:	21 50       	subi	r18, 0x01	; 1
 2ca:	80 40       	sbci	r24, 0x00	; 0
 2cc:	90 40       	sbci	r25, 0x00	; 0
 2ce:	e1 f7       	brne	.-8      	; 0x2c8 <main+0xf8>
 2d0:	00 c0       	rjmp	.+0      	; 0x2d2 <main+0x102>
 2d2:	00 00       	nop
	
    /* Replace with your application code */
    while (1) 
    {
		_delay_ms(500);
		togglePin(led2);
 2d4:	29 81       	ldd	r18, Y+1	; 0x01
 2d6:	3a 81       	ldd	r19, Y+2	; 0x02
 2d8:	4b 81       	ldd	r20, Y+3	; 0x03
 2da:	5c 81       	ldd	r21, Y+4	; 0x04
 2dc:	6d 81       	ldd	r22, Y+5	; 0x05
 2de:	7e 81       	ldd	r23, Y+6	; 0x06
 2e0:	8f 81       	ldd	r24, Y+7	; 0x07
 2e2:	0e 94 4b 00 	call	0x96	; 0x96 <togglePin>
 2e6:	ed cf       	rjmp	.-38     	; 0x2c2 <main+0xf2>

000002e8 <_exit>:
 2e8:	f8 94       	cli

000002ea <__stop_program>:
 2ea:	ff cf       	rjmp	.-2      	; 0x2ea <__stop_program>
