
Program_nRF.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00000154  000001c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000154  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001d6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000208  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009f7  00000000  00000000  00000288  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000710  00000000  00000000  00000c7f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000031e  00000000  00000000  0000138f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b4  00000000  00000000  000016b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003f4  00000000  00000000  00001764  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000341  00000000  00000000  00001b58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00001e99  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e5       	ldi	r30, 0x54	; 84
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 30       	cpi	r26, 0x0E	; 14
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 a8 00 	jmp	0x150	; 0x150 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:
{
	*(pin.DDRx) |= ( 1 << pin.pinNumber );
}

int main(void)
{
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
  9e:	2e 97       	sbiw	r28, 0x0e	; 14
  a0:	0f b6       	in	r0, 0x3f	; 63
  a2:	f8 94       	cli
  a4:	de bf       	out	0x3e, r29	; 62
  a6:	0f be       	out	0x3f, r0	; 63
  a8:	cd bf       	out	0x3d, r28	; 61
	
	gpioPin_t led2 = { .PORTx = &PORTD, .DDRx = &DDRD, .PINx = &PIND, .pinNumber = PD7 };
  aa:	87 e0       	ldi	r24, 0x07	; 7
  ac:	e0 e0       	ldi	r30, 0x00	; 0
  ae:	f1 e0       	ldi	r31, 0x01	; 1
  b0:	de 01       	movw	r26, r28
  b2:	11 96       	adiw	r26, 0x01	; 1
  b4:	01 90       	ld	r0, Z+
  b6:	0d 92       	st	X+, r0
  b8:	8a 95       	dec	r24
  ba:	e1 f7       	brne	.-8      	; 0xb4 <main+0x1e>
	gpioPin_t buzzer = { .PORTx = &PORTD, .DDRx = &DDRD, .PINx = &PIND, .pinNumber = PD4 };
	gpioPin_t alarmLed = { .PORTx = &PORTD, .DDRx = &DDRD, .PINx = &PIND, .pinNumber = PD5 };
  bc:	87 e0       	ldi	r24, 0x07	; 7
  be:	e7 e0       	ldi	r30, 0x07	; 7
  c0:	f1 e0       	ldi	r31, 0x01	; 1
  c2:	de 01       	movw	r26, r28
  c4:	18 96       	adiw	r26, 0x08	; 8
  c6:	01 90       	ld	r0, Z+
  c8:	0d 92       	st	X+, r0
  ca:	8a 95       	dec	r24
  cc:	e1 f7       	brne	.-8      	; 0xc6 <main+0x30>
	*(pin.PORTx) &= ~(1 << pin.pinNumber );
}

void setPinOutput( gpioPin_t pin )
{
	*(pin.DDRx) |= ( 1 << pin.pinNumber );
  ce:	57 9a       	sbi	0x0a, 7	; 10
  d0:	54 9a       	sbi	0x0a, 4	; 10
  d2:	55 9a       	sbi	0x0a, 5	; 10
	*(pin.PORTx) ^= (1 << pin.pinNumber );
}

void setPin( gpioPin_t pin )
{
	*(pin.PORTx) |= (1 << pin.pinNumber );
  d4:	5f 9a       	sbi	0x0b, 7	; 11
  d6:	5c 9a       	sbi	0x0b, 4	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d8:	2f e3       	ldi	r18, 0x3F	; 63
  da:	3d e0       	ldi	r19, 0x0D	; 13
  dc:	83 e0       	ldi	r24, 0x03	; 3
  de:	21 50       	subi	r18, 0x01	; 1
  e0:	30 40       	sbci	r19, 0x00	; 0
  e2:	80 40       	sbci	r24, 0x00	; 0
  e4:	e1 f7       	brne	.-8      	; 0xde <main+0x48>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <main+0x52>
  e8:	00 00       	nop
}

void clearPin(gpioPin_t pin)
{
	*(pin.PORTx) &= ~(1 << pin.pinNumber );
  ea:	5c 98       	cbi	0x0b, 4	; 11
  ec:	24 e1       	ldi	r18, 0x14	; 20
}gpioPin_t;

void togglePin( gpioPin_t pin )
{
	//*(pin->PORTx) ^= ( 1 << pin->pinNumber );
	*(pin.PORTx) ^= (1 << pin.pinNumber );
  ee:	41 e0       	ldi	r20, 0x01	; 1
  f0:	50 e0       	ldi	r21, 0x00	; 0
  f2:	e8 85       	ldd	r30, Y+8	; 0x08
  f4:	f9 85       	ldd	r31, Y+9	; 0x09
  f6:	30 81       	ld	r19, Z
  f8:	ca 01       	movw	r24, r20
  fa:	0e 84       	ldd	r0, Y+14	; 0x0e
  fc:	02 c0       	rjmp	.+4      	; 0x102 <main+0x6c>
  fe:	88 0f       	add	r24, r24
 100:	99 1f       	adc	r25, r25
 102:	0a 94       	dec	r0
 104:	e2 f7       	brpl	.-8      	; 0xfe <main+0x68>
 106:	83 27       	eor	r24, r19
 108:	80 83       	st	Z, r24
 10a:	9f e5       	ldi	r25, 0x5F	; 95
 10c:	3a ee       	ldi	r19, 0xEA	; 234
 10e:	80 e0       	ldi	r24, 0x00	; 0
 110:	91 50       	subi	r25, 0x01	; 1
 112:	30 40       	sbci	r19, 0x00	; 0
 114:	80 40       	sbci	r24, 0x00	; 0
 116:	e1 f7       	brne	.-8      	; 0x110 <main+0x7a>
 118:	00 c0       	rjmp	.+0      	; 0x11a <main+0x84>
 11a:	00 00       	nop
 11c:	21 50       	subi	r18, 0x01	; 1
	
	setPin(buzzer);
	_delay_ms(1000);
	clearPin(buzzer);
	
	for(uint8_t i = 0; i < 20; i++)
 11e:	49 f7       	brne	.-46     	; 0xf2 <main+0x5c>
}gpioPin_t;

void togglePin( gpioPin_t pin )
{
	//*(pin->PORTx) ^= ( 1 << pin->pinNumber );
	*(pin.PORTx) ^= (1 << pin.pinNumber );
 120:	41 e0       	ldi	r20, 0x01	; 1
 122:	50 e0       	ldi	r21, 0x00	; 0
 124:	9f e9       	ldi	r25, 0x9F	; 159
 126:	26 e8       	ldi	r18, 0x86	; 134
 128:	31 e0       	ldi	r19, 0x01	; 1
 12a:	91 50       	subi	r25, 0x01	; 1
 12c:	20 40       	sbci	r18, 0x00	; 0
 12e:	30 40       	sbci	r19, 0x00	; 0
 130:	e1 f7       	brne	.-8      	; 0x12a <main+0x94>
 132:	00 c0       	rjmp	.+0      	; 0x134 <main+0x9e>
 134:	00 00       	nop
 136:	e9 81       	ldd	r30, Y+1	; 0x01
 138:	fa 81       	ldd	r31, Y+2	; 0x02
 13a:	20 81       	ld	r18, Z
 13c:	ca 01       	movw	r24, r20
 13e:	0f 80       	ldd	r0, Y+7	; 0x07
 140:	02 c0       	rjmp	.+4      	; 0x146 <main+0xb0>
 142:	88 0f       	add	r24, r24
 144:	99 1f       	adc	r25, r25
 146:	0a 94       	dec	r0
 148:	e2 f7       	brpl	.-8      	; 0x142 <main+0xac>
 14a:	82 27       	eor	r24, r18
 14c:	80 83       	st	Z, r24
 14e:	ea cf       	rjmp	.-44     	; 0x124 <main+0x8e>

00000150 <_exit>:
 150:	f8 94       	cli

00000152 <__stop_program>:
 152:	ff cf       	rjmp	.-2      	; 0x152 <__stop_program>
